create function topnTest(){
	for $user in dataset UserDataset return {
		"users": $user
	}
}

create function topnTest3($llun){
	for $sub in dataset UserSubscriptionDataset
	for $user in dataset UserDataset
	for $result in dataset recentEmergenciesOfTypeChannelResults
	where uuid($sub.channelSubscriptionId) = $result.subscriptionId
	and $sub.userId = $user.userId
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
}

create function topnTest3ForPub($llun){
	for $er in dataset EmergencyReports
	for $user in dataset UserDataset
	for $result in dataset recentEmergenciesOfTypeChannelResults
	where $er.reportId = $result.result.reports.reportId
	and $er.userId = $user.userId
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
}

create function topnTest3ForPubSub24H($llun){
let $T24H := current-datetime() - day-time-duration("P1D")
let $pubs:= 
	for $er in dataset EmergencyReports
	for $user in dataset UserDataset
	for $result in dataset recentEmergenciesOfTypeChannelResults
	where $er.reportId = $result.result.reports.reportId
	and $er.userId = $user.userId
	and $er.timestamp >= $T24H
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
let $subs:=
	for $sub in dataset UserSubscriptionDataset
	for $user in dataset UserDataset
	for $result in dataset recentEmergenciesOfTypeChannelResults
	where uuid($sub.channelSubscriptionId) = $result.subscriptionId
	and $sub.userId = $user.userId
	and $result.channelExecutionTime >= $T24H
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
	return {
		"pubs":$pubs,
		"subs":$subs
	}
}

create function topnTest4($time, $channel, $userType, $orderBy){
	for $sub in dataset UserSubscriptionDataset
	for $user in dataset UserDataset
	for $result in dataset $channel
	where uuid($sub.channelSubscriptionId) = $result.subscriptionId
	and $sub.userId = $user.userId
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
}


//(2)Time and (3)Channel

//EmergenciesOfType
create function topnTest5EmergenciesOfType24H($llun){
let $T24H := current-datetime() - day-time-duration("P1D")
let $pubs:= 
	for $er in dataset EmergencyReports
	for $user in dataset UserDataset
	for $result in dataset recentEmergenciesOfTypeChannelResults
	where $er.reportId = $result.result.reports.reportId
	and $er.userId = $user.userId
	and $er.timestamp >= $T24H
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
let $subs:=
	for $sub in dataset UserSubscriptionDataset
	for $user in dataset UserDataset
	for $result in dataset recentEmergenciesOfTypeChannelResults
	where uuid($sub.channelSubscriptionId) = $result.subscriptionId
	and $sub.userId = $user.userId
	and $result.channelExecutionTime >= $T24H
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
	return {
		"pubs":$pubs,
		"subs":$subs
	}
}

create function topnTest5EmergenciesOfTypeHistory($llun){
let $pubs:= 
	for $er in dataset EmergencyReports
	for $user in dataset UserDataset
	for $result in dataset recentEmergenciesOfTypeChannelResults
	where $er.reportId = $result.result.reports.reportId
	and $er.userId = $user.userId
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
let $subs:=
	for $sub in dataset UserSubscriptionDataset
	for $user in dataset UserDataset
	for $result in dataset recentEmergenciesOfTypeChannelResults
	where uuid($sub.channelSubscriptionId) = $result.subscriptionId
	and $sub.userId = $user.userId
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
	return {
		"pubs":$pubs,
		"subs":$subs
	}
}

//EmergenciesOfTypeAtLocation
create function topnTest5EmergenciesOfTypeAtLocation24H($llun){
let $T24H := current-datetime() - day-time-duration("P1D")
let $pubs:= 
	for $er in dataset EmergencyReports
	for $user in dataset UserDataset
	for $result in dataset recentEmergenciesOfTypeAtLocationChannelResults
	where $er.reportId = $result.result.reports.reportId
	and $er.userId = $user.userId
	and $er.timestamp >= $T24H
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
let $subs:=
	for $sub in dataset UserSubscriptionDataset
	for $user in dataset UserDataset
	for $result in dataset recentEmergenciesOfTypeAtLocationChannelResults
	where uuid($sub.channelSubscriptionId) = $result.subscriptionId
	and $sub.userId = $user.userId
	and $result.channelExecutionTime >= $T24H
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
	return {
		"pubs":$pubs,
		"subs":$subs
	}
}

create function topnTest5EmergenciesOfTypeAtLocationHistory($llun){
let $pubs:= 
	for $er in dataset EmergencyReports
	for $user in dataset UserDataset
	for $result in dataset recentEmergenciesOfTypeAtLocationChannelResults
	where $er.reportId = $result.result.reports.reportId
	and $er.userId = $user.userId
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
let $subs:=
	for $sub in dataset UserSubscriptionDataset
	for $user in dataset UserDataset
	for $result in dataset recentEmergenciesOfTypeAtLocationChannelResults
	where uuid($sub.channelSubscriptionId) = $result.subscriptionId
	and $sub.userId = $user.userId
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
	return {
		"pubs":$pubs,
		"subs":$subs
	}
}

//IptMsgofEmergenciesOfTypeIntUser
create function topnTest5IptMsgofEmergenciesOfTypeIntUser24H($llun){
let $T24H := current-datetime() - day-time-duration("P1D")
let $pubs:= 
	for $er in dataset EmergencyReports
	for $user in dataset UserDataset
	for $result in dataset recentIptMsgofEmergenciesOfTypeIntUserChannelResults
	where $er.reportId = $result.result.reports.reportId
	and $er.userId = $user.userId
	and $er.timestamp >= $T24H
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
let $subs:=
	for $sub in dataset UserSubscriptionDataset
	for $user in dataset UserDataset
	for $result in dataset recentIptMsgofEmergenciesOfTypeIntUserChannelResults
	where uuid($sub.channelSubscriptionId) = $result.subscriptionId
	and $sub.userId = $user.userId
	and $result.channelExecutionTime >= $T24H
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
	return {
		"pubs":$pubs,
		"subs":$subs
	}
}

create function topnTest5IptMsgofEmergenciesOfTypeIntUserHistory($llun){
let $pubs:= 
	for $er in dataset EmergencyReports
	for $user in dataset UserDataset
	for $result in dataset recentIptMsgofEmergenciesOfTypeIntUserChannelResults
	where $er.reportId = $result.result.reports.reportId
	and $er.userId = $user.userId
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
let $subs:=
	for $sub in dataset UserSubscriptionDataset
	for $user in dataset UserDataset
	for $result in dataset recentIptMsgofEmergenciesOfTypeIntUserChannelResults
	where uuid($sub.channelSubscriptionId) = $result.subscriptionId
	and $sub.userId = $user.userId
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
	return {
		"pubs":$pubs,
		"subs":$subs
	}
}

// if else then

create function topnTest6EmergenciesOfType($time, $utype){
if ($time = "24H")
then
let $T24H := current-datetime() - day-time-duration("P1D")
if ($utype = "pub") 
then
	for $er in dataset EmergencyReports
	for $user in dataset UserDataset
	for $result in dataset recentIptMsgofEmergenciesOfTypeIntUserChannelResults
	where $er.reportId = $result.result.reports.reportId
	and $er.userId = $user.userId
	and $er.timestamp >= $T24H
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
else
	for $sub in dataset UserSubscriptionDataset
	for $user in dataset UserDataset
	for $result in dataset recentIptMsgofEmergenciesOfTypeIntUserChannelResults
	where uuid($sub.channelSubscriptionId) = $result.subscriptionId
	and $sub.userId = $user.userId
	and $result.channelExecutionTime >= $T24H
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
	return {
		"pubs":$pubs,
		"subs":$subs
	}
else
if ($utype = "pub") 
then
	for $er in dataset EmergencyReports
	for $user in dataset UserDataset
	for $result in dataset recentIptMsgofEmergenciesOfTypeIntUserChannelResults
	where $er.reportId = $result.result.reports.reportId
	and $er.userId = $user.userId
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
else
	for $sub in dataset UserSubscriptionDataset
	for $user in dataset UserDataset
	for $result in dataset recentIptMsgofEmergenciesOfTypeIntUserChannelResults
	where uuid($sub.channelSubscriptionId) = $result.subscriptionId
	and $sub.userId = $user.userId
	group by $user := $user.userName with $result
	order by count($result) desc
	limit 10
	return {
		"user":$user,
		"score":count($result)
	}
	return {
		"pubs":$pubs,
		"subs":$subs
	}
}

//SQL++

//EmergenciesOfType
create function topnTest6EmergenciesOfType24HPubs(llun){
(with T24H as current_datetime() - day_time_duration("P1D")
	select u as puber, count(result) as score
	from EmergencyReports er, UserDataset user, recentEmergenciesOfTypeChannelResults result
	where er.reportId = result.result.reports.reportId
	and er.userId = user.userId
	and er.timestamp >= T24H
	group by user.userName as u 
	order by count(result) desc
	limit 10
	)
}

create function topnTest6EmergenciesOfType24HSubs(llun){
(with T24H as current_datetime() - day_time_duration("P1D")
	select u as suber, count(result) as score
	from UserSubscriptionDataset sub, UserDataset user, recentEmergenciesOfTypeChannelResults result
	where uuid(sub.channelSubscriptionId) = result.subscriptionId
	and sub.userId = user.userId
	and result.channelExecutionTime >= T24H
	group by user.userName as u
	order by count(result) desc
	limit 10
	)
}

create function topnTest6EmergenciesOfTypeHistoryPubs(llun){
(	select u as puber, count(result) as score
	from EmergencyReports er, UserDataset user, recentEmergenciesOfTypeChannelResults result
	where er.reportId = result.result.reports.reportId
	and er.userId = user.userId
	group by user.userName as u 
	order by count(result) desc
	limit 10
	)
}

create function topnTest6EmergenciesOfTypeHistorySubs(llun){
(	select u as suber, count(result) as score
	from UserSubscriptionDataset sub, UserDataset user, recentEmergenciesOfTypeChannelResults result
	where uuid(sub.channelSubscriptionId) = result.subscriptionId
	and sub.userId = user.userId
	group by user.userName as u
	order by count(result) desc
	limit 10
	)
}

//EmergenciesOfTypeAtLocation
create function topnTest6EmergenciesOfTypeAtLocation24HPubs(llun){
(with T24H as current_datetime() - day_time_duration("P1D")
	select u as puber, count(result) as score
	from EmergencyReports er, UserDataset user, recentEmergenciesOfTypeAtLocationChannelResults result
	where er.reportId = result.result.reports.reportId
	and er.userId = user.userId
	and er.timestamp >= T24H
	group by user.userName as u 
	order by count(result) desc
	limit 10
	)
}

create function topnTest6EmergenciesOfTypeAtLocation24HSubs(llun){
(with T24H as current_datetime() - day_time_duration("P1D")
	select u as suber, count(result) as score
	from UserSubscriptionDataset sub, UserDataset user, recentEmergenciesOfTypeAtLocationChannelResults result
	where uuid(sub.channelSubscriptionId) = result.subscriptionId
	and sub.userId = user.userId
	and result.channelExecutionTime >= T24H
	group by user.userName as u
	order by count(result) desc
	limit 10
	)
}

create function topnTest6EmergenciesOfTypeAtLocationHistoryPubs(llun){
(	select u as puber, count(result) as score
	from EmergencyReports er, UserDataset user, recentEmergenciesOfTypeAtLocationChannelResults result
	where er.reportId = result.result.reports.reportId
	and er.userId = user.userId
	group by user.userName as u 
	order by count(result) desc
	limit 10
	)
}

create function topnTest6EmergenciesOfTypeAtLocationHistorySubs(llun){
(	select u as suber, count(result) as score
	from UserSubscriptionDataset sub, UserDataset user, recentEmergenciesOfTypeAtLocationChannelResults result
	where uuid(sub.channelSubscriptionId) = result.subscriptionId
	and sub.userId = user.userId
	group by user.userName as u
	order by count(result) desc
	limit 10
	)
}

//EmergenciesOfTypeNearMe
create function topnTest6EmergenciesOfTypeNearMe24HPubs(llun){
(with T24H as current_datetime() - day_time_duration("P1D")
	select u as puber, count(result) as score
	from EmergencyReports er, UserDataset user, recentEmergenciesOfTypeNearMeChannelResults result
	where er.reportId = result.result.reports.reportId
	and er.userId = user.userId
	and er.timestamp >= T24H
	group by user.userName as u 
	order by count(result) desc
	limit 10
	)
}

create function topnTest6EmergenciesOfTypeNearMe24HSubs(llun){
(with T24H as current_datetime() - day_time_duration("P1D")
	select u as suber, count(result) as score
	from UserSubscriptionDataset sub, UserDataset user, recentEmergenciesOfTypeNearMeChannelResults result
	where uuid(sub.channelSubscriptionId) = result.subscriptionId
	and sub.userId = user.userId
	and result.channelExecutionTime >= T24H
	group by user.userName as u
	order by count(result) desc
	limit 10
	)
}

create function topnTest6EmergenciesOfTypeNearMeHistoryPubs(llun){
(	select u as puber, count(result) as score
	from EmergencyReports er, UserDataset user, recentEmergenciesOfTypeNearMeChannelResults result
	where er.reportId = result.result.reports.reportId
	and er.userId = user.userId
	group by user.userName as u 
	order by count(result) desc
	limit 10
	)
}

create function topnTest6EmergenciesOfTypeNearMeHistorySubs(llun){
(	select u as suber, count(result) as score
	from UserSubscriptionDataset sub, UserDataset user, recentEmergenciesOfTypeNearMeChannelResults result
	where uuid(sub.channelSubscriptionId) = result.subscriptionId
	and sub.userId = user.userId
	group by user.userName as u
	order by count(result) desc
	limit 10
	)
}

// APP apiKey
//getApiKey("emapp");
//use channels
create function getApiKey(name){
(select app.apiKey
from BrokerMetadata.ApplicationDataset app
where app.appName=name)
}

